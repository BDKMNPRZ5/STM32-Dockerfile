FROM --platform=$BUILDPLATFORM debian:bookworm-slim

ARG TARGETPLATFORM
ARG BUILDPLATFORM
ARG TOOLS_PATH=/opt/gcc-arm-none-eabi
ARG ARM_VERSION=12.2.rel1

RUN echo "I am running on $BUILDPLATFORM, building for $TARGETPLATFORM" > /log

RUN if [ "$TARGETPLATFORM" = "linux/arm64" ]; then \
	dpkg --add-architecture arm64 && \
	touch /etc/apt/sources.list.d/arm-cross-compile-sources.list && \
	echo "# arm64 repositories" >> /etc/apt/sources.list && \
	echo "deb [arch=arm64] http://ports.ubuntu.com/ubuntu-ports focal restricted" >> /etc/apt/sources.list && \
	echo "deb [arch=arm64] http://ports.ubuntu.com/ubuntu-ports focal main restricted" >> /etc/apt/sources.list && \
	echo "deb [arch=arm64] http://ports.ubuntu.com/ubuntu-ports focal-updates main" >> /etc/apt/sources.list && \
	echo "deb [arch=arm64] http://ports.ubuntu.com/ubuntu-ports focal-updates main restricted" >> /etc/apt/sources.list && \
	echo "deb [arch=arm64] http://ports.ubuntu.com/ubuntu-ports focal-updates universe" >> /etc/apt/sources.list && \
	echo "deb [arch=arm64] http://ports.ubuntu.com/ubuntu-ports focal-updates multiverse" >> /etc/apt/sources.list && \
	echo "deb [arch=arm64] http://ports.ubuntu.com/ubuntu-ports focal universe" >> /etc/apt/sources.list && \
	echo "deb [arch=arm64] http://ports.ubuntu.com/ubuntu-ports focal multiverse" >> /etc/apt/sources.list && \
	echo "deb [arch=arm64] http://ports.ubuntu.com/ubuntu-ports focal-backports main" >> /etc/apt/sources.list && \
	echo "deb [arch=arm64] http://ports.ubuntu.com/ubuntu-ports focal-backports main restricted universe multiverse" >> /etc/apt/sources.list && \
	echo "deb [arch=arm64] http://ports.ubuntu.com/ubuntu-ports focal-security restricted" >> /etc/apt/sources.list && \
	echo "deb [arch=arm64] http://ports.ubuntu.com/ubuntu-ports focal-security main restricted" >> /etc/apt/sources.list && \
	echo "deb [arch=arm64] http://ports.ubuntu.com/ubuntu-ports focal-security universe" >> /etc/apt/sources.list && \
	echo "deb [arch=arm64] http://ports.ubuntu.com/ubuntu-ports focal-security multiverse" >> /etc/apt/sources.list && \
	sed -i -e 's/archive.ubuntu.com\|security.ubuntu.com/old-releases.ubuntu.com/g' /etc/apt/sources.list; \
	fi

# Prep basic packages to build STM32 CMake project
RUN apt-get update && apt-get install -y \
	build-essential \
	cmake ninja-build \
	git gnupg2 \
	stlink-tools \
	xz-utils curl

# Get ARM Toolchain
RUN if [ "$TARGETPLATFORM" = "linux/arm64" ]; then export ARM_ARCH=aarch64; \
	elif [ "$TARGETPLATFORM" = "linux/arm64/v8" ]; then export ARM_ARCH=aarch64; \
	elif [ "$TARGETPLATFORM" = "linux/aarch64" ]; then export ARM_ARCH=aarch64; \
    elif [ "$TARGETPLATFORM" = "linux/amd64" ]; then export ARM_ARCH=x86_64; \
    fi \
	&& mkdir ${TOOLS_PATH} \
	&& curl -Lo gcc-arm-none-eabi.tar.xz "https://developer.arm.com/-/media/Files/downloads/gnu/${ARM_VERSION}/binrel/arm-gnu-toolchain-${ARM_VERSION}-${ARM_ARCH}-arm-none-eabi.tar.xz" \
	&& tar xf gcc-arm-none-eabi.tar.xz --strip-components=1 -C ${TOOLS_PATH} \
	&& rm gcc-arm-none-eabi.tar.xz \
	&& rm ${TOOLS_PATH}/*.txt \
	&& rm -rf ${TOOLS_PATH}/share/doc \
	&& echo "https://developer.arm.com/-/media/Files/downloads/gnu/${ARM_VERSION}/binrel/arm-gnu-toolchain-${ARM_VERSION}-${ARM_ARCH}-arm-none-eabi.tar.xz"

# Get static analysis tools: clang-format clang-tidy, Lizard, cpplint
RUN apt-get install -y \
	clang-format clang-tidy

# Add Toolchain to PATH
ENV PATH="$PATH:${TOOLS_PATH}/bin"

# Add Entrypoint script
ADD build.sh /usr/local/bin/build.sh
ENTRYPOINT ["/usr/local/bin/build.sh"]